#+title: Readme
#+subtitle: Bridge for Circuit's Non-standard OpenAPI Integration
#+author: David Connett

* Overview

Circuit's API differs from the standard OpenAPI calling conventions commonly expected by developer tools and libraries:

- Models are selected using a *deployment ID in the URL path*, not a ~model~ parameter.
- API authentication uses *OAuth2 tokens* (which expire hourly), not static API keys.
- Integration tools often *expect standard, parameter-based* OpenAPI flows.

This project provides a minimal local webserver that acts as a translation layer between *standard OpenAPI clients* and *Circuit's API*.

* Features

- Exposes a standard OpenAPI-compatible endpoint (e.g., ~POST /v1/chat/completions~).
- Accepts requests with a ~model~ parameter and static API key (compatible with typical OpenAPI tools).
- Converts requests to Circuit’s required format:
  - Moves ~model~ parameter into the deployment path segment.
  - Fetches and caches Circuit OAuth2 tokens for use as the API key.
- Handles token refresh transparently; clients continue to use a static API key.
- Can integrate with tools such as OpenAI SDKs, Ollama, LangChain, LlamaIndex, etc.

* Why?

- *Portability*: Use standard tools for LLM access with Circuit's infrastructure.
- *Simplicity*: Remove the need for complex, recurring OAuth2 token generation in every client.
- *Interoperability*: Bridge gap between CLI tools, libraries, and Circuit's deployment-based flow.

* Usage

1. Start the webserver locally.
2. Point your tool’s OpenAPI endpoint and API key config to the local server.
3. The server will translate and forward your requests to Circuit.

Example ::

#+begin_src sh
curl http://localhost:12000/v1/chat/completions \
  -H "Authorization: Bearer static_api_key" \
  -d '{"model": "gpt-4o-mini", "messages": ...}'
#+end_src

The server:
- Rewrites the request to ~https://chat-ai.cisco.com/openai/deployments/gpt-4o-mini/chat/completions~
- Inserts the correct OAuth2 token

* Configuration

- Provide Circuit* Okta credentials and an appkey to the server (see [[file:circuit_api.org][circuit_api.org]] for details).
- (Optional) Set default model, port, etc. via env or command line.

* Roadmap

- [ ] Basic translation for chat completions
- [ ] Automated and cached OAuth2 token management
- [ ] Support for additional OpenAPI methods/endpoints as needed

* References

- [[https://ai-chat.cisco.com/bridgeit-platform/api/home][Cisco CIRCUIT Chat API]]
- See ~circuit_api.org~ for specifics on the underlying API flow.

* Author

David Connett
